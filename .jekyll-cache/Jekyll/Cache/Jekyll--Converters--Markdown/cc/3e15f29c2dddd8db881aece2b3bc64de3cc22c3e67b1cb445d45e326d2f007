I"uI<h2 id="introduction">Introduction</h2>

<p>I got an interesting exercise to work on using SQL. Since the data was
available in a data frame format, I thought I could use SQL within R to
solve it.</p>

<p>To run SQL in R, I use the
<a href="https://www.rdocumentation.org/packages/sqldf/versions/0.4-11"><code class="highlighter-rouge">sqldf package</code></a>.</p>

<p>The sqldf package is very simple to use. The main function is <code class="highlighter-rouge">sqldf()</code>,
and what it does is to set up a database, it imports the data frame into
the database, it performs the SQL select or other statement passed to
the function, and returns the result using a heuristic to determine
which class to assign to each column of the returned data frame.</p>

<p>All my SQL statements will be wrapped up by <code class="highlighter-rouge">sqldf()</code>.</p>

<h2 id="preparing-the-data">Preparing the data</h2>

<p>This exercise uses a simple table containing info about
purchase_revenue and purchase_date by customer_id. Here is the code I
use to prepare the data.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Load required packages
library(tidyverse)
library(sqldf)
library(lubridate)
library(knitr)
library(tictoc)

# I chose to work with a SQLite DBMS
options(sqldf.driver = "SQLite")

# Create the columns of the data frame
customer_id &lt;- c(1, 2, 3, 2, 2, 3, 1, 3, 2)
purchase_date &lt;- c("2015-01-01 14:32:51", "2015-01-02 12:14:51", "2015-01-02 18:08:21", "2015-03-02 23:42:21", "2015-04-02 23:42:21", "2015-07-03 22:07:11", "2015-09-03 21:02:41", "2015-10-03 05:15:24", "2015-10-03 07:11:56")
purchase_revenue &lt;- c(25.34, 34.34, 37.15, 47.24, 54.12, 65.21, 74.60, 11.30, 22.45)

# Create the data frame "test_orders"
test_orders &lt;- data.frame(customer_id, purchase_date, purchase_revenue)

# Make sure the purchase_date column has a date format
test_orders$purchase_date &lt;- ymd_hms(test_orders$purchase_date)
</code></pre></div></div>

<table>
<caption>Test Orders Table</caption>
<thead>
<tr class="header">
<th style="text-align: right;">customer_id</th>
<th style="text-align: left;">purchase_date</th>
<th style="text-align: right;">purchase_revenue</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">2015-01-01 14:32:51</td>
<td style="text-align: right;">25.34</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: left;">2015-01-02 12:14:51</td>
<td style="text-align: right;">34.34</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: left;">2015-01-02 18:08:21</td>
<td style="text-align: right;">37.15</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: left;">2015-03-02 23:42:21</td>
<td style="text-align: right;">47.24</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: left;">2015-04-02 23:42:21</td>
<td style="text-align: right;">54.12</td>
</tr>
<tr class="even">
<td style="text-align: right;">3</td>
<td style="text-align: left;">2015-07-03 22:07:11</td>
<td style="text-align: right;">65.21</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">2015-09-03 21:02:41</td>
<td style="text-align: right;">74.60</td>
</tr>
<tr class="even">
<td style="text-align: right;">3</td>
<td style="text-align: left;">2015-10-03 05:15:24</td>
<td style="text-align: right;">11.30</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: left;">2015-10-03 07:11:56</td>
<td style="text-align: right;">22.45</td>
</tr>
</tbody>
</table>

<h2 id="calculating-running-totals">Calculating running totals</h2>

<p>The problem at hand asks to calculate the first date (YYYY-MM-DD) on
which a customer’s cumulative purchase_revenue has reached $100 using
the test_orders table.</p>

<p>Like with most SQL problems, there are multiple ways you can solve this.
Here I’m going to explain two ways:</p>

<ol>
  <li>Using a window function</li>
  <li>Using a self join</li>
</ol>

<h3 id="using-a-window-function">Using a window function</h3>

<p>It would be simple to write a SQL query returning the cumulative revenue
for all customers.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT SUM(purchase_revenue) as cumulative_revenue
FROM test_orders
      ')

##   cumulative_revenue
## 1             371.75
</code></pre></div></div>

<p>Aggregate functions like <code class="highlighter-rouge">SUM</code>, perform calculations across a set of
rows and return a single output row.</p>

<p>Similar to an aggregate function, a window function calculates on a set
of rows, but unlike an aggregate function, a window function does not
cause rows to become grouped into a single output row.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT customer_id
    ,purchase_date
    ,purchase_revenue
    ,SUM(purchase_revenue) OVER () cumulative_revenue
FROM test_orders
      ')

##   customer_id       purchase_date purchase_revenue cumulative_revenue
## 1           1 2015-01-01 09:32:51            25.34             371.75
## 2           2 2015-01-02 07:14:51            34.34             371.75
## 3           3 2015-01-02 13:08:21            37.15             371.75
## 4           2 2015-03-02 18:42:21            47.24             371.75
## 5           2 2015-04-02 19:42:21            54.12             371.75
## 6           3 2015-07-03 18:07:11            65.21             371.75
## 7           1 2015-09-03 17:02:41            74.60             371.75
## 8           3 2015-10-03 01:15:24            11.30             371.75
## 9           2 2015-10-03 03:11:56            22.45             371.75
</code></pre></div></div>

<p>The syntax of a windows function is as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>window_function (expression) OVER
     ( [ PARTITION BY expression_list ]
       [ ORDER BY order_list ]
       [ ROWS frame_clause ])
</code></pre></div></div>

<p>Window functions are initiated with the <code class="highlighter-rouge">OVER</code> clause, and are
configured using three concepts:</p>

<p>*window partition (<code class="highlighter-rouge">PARTITION BY</code>) - groups rows into partitions *window
ordering (<code class="highlighter-rouge">ORDER BY</code>) - defines the order or sequence of rows within
each partition *window frame (<code class="highlighter-rouge">ROWS</code>) - defines the window by use of an
offset from the specified row</p>

<p>Definitions:</p>

<ul>
  <li>expression_list: Comma separated list of expressions. They can only
refer to column names derived by the FROM clause. The expressions in
the list cannot refer to expressions or aliases in the select list.
If you omit the PARTITION BY clause, the whole result set is treated
as a single partition.</li>
  <li>order_list: Comma separated list of expressions. They can only
refer to column names derived by the FROM clause.</li>
  <li>frame_clause: Define the offset using <code class="highlighter-rouge">CURRENT ROW</code>,
<code class="highlighter-rouge">_value_ PRECEDING</code>, <code class="highlighter-rouge">UNBOUNDED PRECEDING</code>, <code class="highlighter-rouge">_value_ FOLLOWING</code>,
<code class="highlighter-rouge">UNBOUNDED FOLLOWING</code></li>
</ul>

<p>The documentation on the <code class="highlighter-rouge">OVER</code> clause for a SQL Server can be found
<a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/select-over-clause-transact-sql?view=sql-server-2017">here</a>.</p>

<p>Going back to the exercise.</p>

<p>Let’s say we want to calculate the cumulative_revenue by customer_id.
One familiar way to do this is using <code class="highlighter-rouge">GROUP BY</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT customer_id
    ,SUM(purchase_revenue) AS cumulative_purchase
FROM test_orders
GROUP BY customer_id
      ')

##   customer_id cumulative_purchase
## 1           1               99.94
## 2           2              158.15
## 3           3              113.66
</code></pre></div></div>

<p>The query above returns three rows because we are grouping by
customer_id and we have three distinct customers.</p>

<p>The <code class="highlighter-rouge">GROUP BY</code> clause is used often used in conjunction with an
aggregate function, in this case, <code class="highlighter-rouge">SUM()</code>. The <code class="highlighter-rouge">GROUP BY</code> clause reduces
the number of rows returned by rolling them up and calculating the sums
for each group.</p>

<p>Now let’s calculate the cumulative_revenue by customer_id using the
<code class="highlighter-rouge">PARTITION BY</code> clause.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT customer_id
    ,purchase_date
    ,purchase_revenue
    ,SUM(purchase_revenue) OVER (PARTITION BY customer_id) AS cummulative_revenue
FROM test_orders
ORDER BY customer_id
      ')

##   customer_id       purchase_date purchase_revenue cummulative_revenue
## 1           1 2015-01-01 09:32:51            25.34               99.94
## 2           1 2015-09-03 17:02:41            74.60               99.94
## 3           2 2015-01-02 07:14:51            34.34              158.15
## 4           2 2015-03-02 18:42:21            47.24              158.15
## 5           2 2015-04-02 19:42:21            54.12              158.15
## 6           2 2015-10-03 03:11:56            22.45              158.15
## 7           3 2015-01-02 13:08:21            37.15              113.66
## 8           3 2015-07-03 18:07:11            65.21              113.66
## 9           3 2015-10-03 01:15:24            11.30              113.66
</code></pre></div></div>

<p>The <code class="highlighter-rouge">PARTITION BY</code> clause divides the rows into partitions given by the
customer_id column, the <code class="highlighter-rouge">SUM()</code> function is applied to each partition.</p>

<p>As we can see, the <code class="highlighter-rouge">PARTITION BY</code> clause does not reduce the number of
rows returned.</p>

<p>Now, what we really want to find is the running total per customer. That
is a cummulative sum of the purchase_revenue by date.</p>

<p>We want to sum the revenue by customer_id and we want to do that by
date (from the oldest to newest), so we need to divide the data by
customer_id and add up the purchase_revenue ordering the rows by
purchase_date. We use <code class="highlighter-rouge">ORDER BY</code> in the <code class="highlighter-rouge">OVER</code> clause.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT customer_id
    ,purchase_date
    ,purchase_revenue
    ,SUM(purchase_revenue) OVER (
        PARTITION BY customer_id 
        ORDER BY purchase_date
        ) AS running_total
FROM test_orders
ORDER BY customer_id
      ')

##   customer_id       purchase_date purchase_revenue running_total
## 1           1 2015-01-01 09:32:51            25.34         25.34
## 2           1 2015-09-03 17:02:41            74.60         99.94
## 3           2 2015-01-02 07:14:51            34.34         34.34
## 4           2 2015-03-02 18:42:21            47.24         81.58
## 5           2 2015-04-02 19:42:21            54.12        135.70
## 6           2 2015-10-03 03:11:56            22.45        158.15
## 7           3 2015-01-02 13:08:21            37.15         37.15
## 8           3 2015-07-03 18:07:11            65.21        102.36
## 9           3 2015-10-03 01:15:24            11.30        113.66
</code></pre></div></div>

<p>To get the first date (YYYY-MM-DD) on which a customer’s cumulative
purchase_revenue has reached $100, we add a filter.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf(' SELECT customer_id
    ,purchase_date
    ,running_total
FROM (
    SELECT customer_id
        ,purchase_date
        ,purchase_revenue
        ,SUM(purchase_revenue) OVER (
            PARTITION BY customer_id 
            ORDER BY purchase_date
            ) AS running_total
    FROM test_orders
    )
WHERE running_total &gt;= 100
GROUP BY customer_id
      ')

##   customer_id       purchase_date running_total
## 1           2 2015-04-02 19:42:21        135.70
## 2           3 2015-07-03 18:07:11        102.36
</code></pre></div></div>

<p><em>Note: Here I’m using a group-by trick to get the first ocurrence of a
value higher than $100. MySQL allows you to not aggregate the
non-grouped-by columns (other databases would throw a syntax error), in
which case it outputs only the first occurrence of each group-by
value(s). Note though that this won’t guarantee the way in which the
“first” occurrence is determined (it will be just how the rows are read
in). If you want a particular first occurrence, sort first, then apply
the group-by trick.</em></p>

<h3 id="using-an-self-join">Using an self join</h3>

<p>A self join is a query that compares a table to itself. In this case,
we’re comparing each date to any date less than or equal to it in order
to calculate the running total.</p>

<p>More especifically, we take the sum of purchase_revenue in the second
table over every row that has a date less than or equal to the date
coming from the first table.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT t1.customer_id
    ,t1.purchase_revenue
    ,SUM(t2.purchase_revenue) AS running_total
FROM test_orders t1
    ,test_orders t2
WHERE t1.purchase_date &gt;= t2.purchase_date
    AND t1.customer_id = t2.customer_id
GROUP BY t2.customer_id
    ,t1.purchase_date
      ')

##   customer_id purchase_revenue running_total
## 1           1            25.34         25.34
## 2           1            74.60         99.94
## 3           2            34.34         34.34
## 4           2            47.24         81.58
## 5           2            54.12        135.70
## 6           2            22.45        158.15
## 7           3            37.15         37.15
## 8           3            65.21        102.36
## 9           3            11.30        113.66
</code></pre></div></div>

<p>Which is the same as using the JOIN function</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT t1.customer_id
    ,t1.purchase_date
    ,t1.purchase_revenue
    ,SUM(t2.purchase_revenue) AS running_total
FROM test_orders t1
INNER JOIN test_orders t2 ON t1.purchase_date &gt;= t2.purchase_date
    AND t1.customer_id = t2.customer_id
GROUP BY t2.customer_id
    ,t1.purchase_date
      ')

##   customer_id       purchase_date purchase_revenue running_total
## 1           1 2015-01-01 09:32:51            25.34         25.34
## 2           1 2015-09-03 17:02:41            74.60         99.94
## 3           2 2015-01-02 07:14:51            34.34         34.34
## 4           2 2015-03-02 18:42:21            47.24         81.58
## 5           2 2015-04-02 19:42:21            54.12        135.70
## 6           2 2015-10-03 03:11:56            22.45        158.15
## 7           3 2015-01-02 13:08:21            37.15         37.15
## 8           3 2015-07-03 18:07:11            65.21        102.36
## 9           3 2015-10-03 01:15:24            11.30        113.66
</code></pre></div></div>

<p>Filtering for the dates (YYYY-MM-DD) on which a customer’s cumulative
purchase_revenue has reached or surpassed $100.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT t1.customer_id
    ,t1.purchase_date
    ,t1.purchase_revenue
    ,SUM(t2.purchase_revenue) AS running_total
FROM test_orders t1
INNER JOIN test_orders t2 ON t1.purchase_date &gt;= t2.purchase_date
    AND t1.customer_id = t2.customer_id
GROUP BY t2.customer_id
    ,t1.purchase_date
HAVING SUM(t2.purchase_revenue) &gt;= 100
      ')

##   customer_id       purchase_date purchase_revenue running_total
## 1           2 2015-04-02 19:42:21            54.12        135.70
## 2           2 2015-10-03 03:11:56            22.45        158.15
## 3           3 2015-07-03 18:07:11            65.21        102.36
## 4           3 2015-10-03 01:15:24            11.30        113.66
</code></pre></div></div>

<p>I will have to make more research on how to get only the first date on
which a customer’s cumulative purchase_revenue has reached $100. All I
can come out with now is an outer filter.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqldf('SELECT customer_id
    ,DATE(
        MIN(purchase_date)
        ,"unixepoch"
        ) AS purchase_date
    ,running_total
FROM (
    SELECT t1.customer_id
        ,t1.purchase_date
        ,t1.purchase_revenue
        ,SUM(t2.purchase_revenue) AS running_total
    FROM test_orders t1
    INNER JOIN test_orders t2 ON t1.purchase_date &gt;= t2.purchase_date
        AND t1.customer_id = t2.customer_id
    GROUP BY t2.customer_id
        ,t1.purchase_date
    HAVING SUM(t2.purchase_revenue) &gt;= 100
    )
GROUP BY customer_id
      ')

## Warning in structure(as.numeric(x), class = c("POSIXct", "POSIXt")): NAs
## introduced by coercion

##   customer_id purchase_date running_total
## 1           2          &lt;NA&gt;        135.70
## 2           3          &lt;NA&gt;        102.36
</code></pre></div></div>

<h3 id="comparing-the-window-function-method-vsthe-self-join-method">Comparing the window function method vs. the self-join method</h3>

<p>So, which method is faster?</p>

<p>A quick way to check on execution time in R
is using system.time() which returns the CPU (and other) times that the
expression used.</p>

<p>The elapsed time is the wall clock time taken to execute the function
sqldf. The “user CPU time” gives the CPU time spent by the current
process (i.e., the current R session) and “system CPU time” gives the
CPU time spent by the kernel (the operating system) on behalf of the
current process.</p>

<h5 id="self-join-execution-time">Self-Join execution time</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##    user  system elapsed 
##   0.015   0.004   0.019
</code></pre></div></div>

<h4 id="window-function-execution-time">Window function execution time.</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##    user  system elapsed 
##    0.02    0.00    0.02
</code></pre></div></div>

<p>The window function has an elapsed time about 10% faster than the self
join function. Plus I believe it’s easier to write.</p>
:ET